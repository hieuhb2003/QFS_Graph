"""
Run All Demos - GraphRAG System
Script ƒë·ªÉ ch·∫°y t·∫•t c·∫£ c√°c demo c·ªßa GraphRAG system
"""

import asyncio
import os
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from examples.demo_quick_test import quick_test
from examples.demo_full_workflow import demo_full_workflow, demo_simple_workflow
from examples.demo_clustering_integration import demo_clustering_integration
from examples.demo_graphrag import demo_graphrag
from src.graphrag.utils.logger_config import setup_logger


def print_menu():
    """In menu l·ª±a ch·ªçn"""
    print("\n" + "="*60)
    print("üéØ GraphRAG System - Demo Menu")
    print("="*60)
    print("1. Quick Test (Test nhanh t·∫•t c·∫£ ch·ª©c nƒÉng)")
    print("2. Full Workflow v·ªõi LLM (C·∫ßn OpenAI API key)")
    print("3. Simple Workflow (Kh√¥ng c·∫ßn LLM)")
    print("4. Clustering Integration Demo")
    print("5. GraphRAG Basic Demo")
    print("6. Ch·∫°y t·∫•t c·∫£ demo (tr·ª´ full workflow)")
    print("0. Tho√°t")
    print("="*60)


async def run_all_demos():
    """Ch·∫°y t·∫•t c·∫£ demo (tr·ª´ full workflow)"""
    logger = setup_logger(name="All-Demos", log_level="INFO")
    logger.info("üöÄ Ch·∫°y t·∫•t c·∫£ demo...")
    
    demos = [
        ("Quick Test", quick_test),
        ("Simple Workflow", demo_simple_workflow),
        ("Clustering Integration", demo_clustering_integration),
        ("GraphRAG Basic", demo_graphrag)
    ]
    
    for name, demo_func in demos:
        try:
            logger.info(f"\n{'='*40}")
            logger.info(f"üéØ Running {name}...")
            logger.info(f"{'='*40}")
            await demo_func()
            logger.info(f"‚úÖ {name} completed successfully!")
        except Exception as e:
            logger.error(f"‚ùå {name} failed: {e}")
            import traceback
            traceback.print_exc()
    
    logger.info("\nüéâ All demos completed!")


async def main():
    """Main function"""
    logger = setup_logger(name="Demo-Runner", log_level="INFO")
    
    while True:
        print_menu()
        choice = input("Ch·ªçn demo (0-6): ").strip()
        
        try:
            if choice == "0":
                logger.info("üëã Goodbye!")
                break
            elif choice == "1":
                logger.info("üéØ Running Quick Test...")
                await quick_test()
            elif choice == "2":
                if not os.getenv("OPENAI_API_KEY"):
                    logger.warning("‚ö†Ô∏è C·∫ßn OpenAI API key ƒë·ªÉ ch·∫°y full workflow!")
                    logger.info("üí° Set OPENAI_API_KEY environment variable")
                    continue
                logger.info("üéØ Running Full Workflow...")
                await demo_full_workflow()
            elif choice == "3":
                logger.info("üéØ Running Simple Workflow...")
                await demo_simple_workflow()
            elif choice == "4":
                logger.info("üéØ Running Clustering Integration...")
                await demo_clustering_integration()
            elif choice == "5":
                logger.info("üéØ Running GraphRAG Basic...")
                await demo_graphrag()
            elif choice == "6":
                await run_all_demos()
            else:
                logger.warning("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                continue
                
        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è Interrupted by user")
            break
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            import traceback
            traceback.print_exc()
        
        input("\nPress Enter to continue...")


if __name__ == "__main__":
    print("üéØ GraphRAG System Demo Runner")
    print("="*50)
    print("üìã Available demos:")
    print("  ‚Ä¢ Quick Test: Test nhanh t·∫•t c·∫£ ch·ª©c nƒÉng")
    print("  ‚Ä¢ Full Workflow: Demo ƒë·∫ßy ƒë·ªß v·ªõi LLM")
    print("  ‚Ä¢ Simple Workflow: Demo kh√¥ng c·∫ßn LLM")
    print("  ‚Ä¢ Clustering Integration: Demo clustering")
    print("  ‚Ä¢ GraphRAG Basic: Demo c∆° b·∫£n")
    print("="*50)
    
    asyncio.run(main()) 